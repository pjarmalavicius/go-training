// Code generated by mockery v2.53.5. DO NOT EDIT.

package lesson

import mock "github.com/stretchr/testify/mock"

// mockStudent is an autogenerated mock type for the student type
type mockStudent struct {
	mock.Mock
}

type mockStudent_Expecter struct {
	mock *mock.Mock
}

func (_m *mockStudent) EXPECT() *mockStudent_Expecter {
	return &mockStudent_Expecter{mock: &_m.Mock}
}

// Ask provides a mock function with no fields
func (_m *mockStudent) Ask() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ask")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockStudent_Ask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ask'
type mockStudent_Ask_Call struct {
	*mock.Call
}

// Ask is a helper method to define mock.On call
func (_e *mockStudent_Expecter) Ask() *mockStudent_Ask_Call {
	return &mockStudent_Ask_Call{Call: _e.mock.On("Ask")}
}

func (_c *mockStudent_Ask_Call) Run(run func()) *mockStudent_Ask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockStudent_Ask_Call) Return(_a0 string) *mockStudent_Ask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockStudent_Ask_Call) RunAndReturn(run func() string) *mockStudent_Ask_Call {
	_c.Call.Return(run)
	return _c
}

// Remember provides a mock function with given fields: answer
func (_m *mockStudent) Remember(answer string) {
	_m.Called(answer)
}

// mockStudent_Remember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remember'
type mockStudent_Remember_Call struct {
	*mock.Call
}

// Remember is a helper method to define mock.On call
//   - answer string
func (_e *mockStudent_Expecter) Remember(answer interface{}) *mockStudent_Remember_Call {
	return &mockStudent_Remember_Call{Call: _e.mock.On("Remember", answer)}
}

func (_c *mockStudent_Remember_Call) Run(run func(answer string)) *mockStudent_Remember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockStudent_Remember_Call) Return() *mockStudent_Remember_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockStudent_Remember_Call) RunAndReturn(run func(string)) *mockStudent_Remember_Call {
	_c.Run(run)
	return _c
}

// newMockStudent creates a new instance of mockStudent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStudent(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStudent {
	mock := &mockStudent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
