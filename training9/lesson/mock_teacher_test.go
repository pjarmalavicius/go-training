// Code generated by mockery v2.53.5. DO NOT EDIT.

package lesson

import mock "github.com/stretchr/testify/mock"

// mockTeacher is an autogenerated mock type for the teacher type
type mockTeacher struct {
	mock.Mock
}

type mockTeacher_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTeacher) EXPECT() *mockTeacher_Expecter {
	return &mockTeacher_Expecter{mock: &_m.Mock}
}

// Answer provides a mock function with given fields: question
func (_m *mockTeacher) Answer(question string) (string, error) {
	ret := _m.Called(question)

	if len(ret) == 0 {
		panic("no return value specified for Answer")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(question)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(question)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(question)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockTeacher_Answer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Answer'
type mockTeacher_Answer_Call struct {
	*mock.Call
}

// Answer is a helper method to define mock.On call
//   - question string
func (_e *mockTeacher_Expecter) Answer(question interface{}) *mockTeacher_Answer_Call {
	return &mockTeacher_Answer_Call{Call: _e.mock.On("Answer", question)}
}

func (_c *mockTeacher_Answer_Call) Run(run func(question string)) *mockTeacher_Answer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockTeacher_Answer_Call) Return(_a0 string, _a1 error) *mockTeacher_Answer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockTeacher_Answer_Call) RunAndReturn(run func(string) (string, error)) *mockTeacher_Answer_Call {
	_c.Call.Return(run)
	return _c
}

// newMockTeacher creates a new instance of mockTeacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTeacher(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTeacher {
	mock := &mockTeacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
